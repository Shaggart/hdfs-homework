[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Professional\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Professional\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.4 (Oracle Corporation Java 16.0.1)
[debug]       Load.loadUnit: plugins took 480.4375ms
[debug]       Load.loadUnit: defsScala took 0.534ms
[debug] [Loading] Scanning directory C:\Users\Professional\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Professional\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 35.6505 ms
[debug]           Load.resolveProject(global-plugins) took 82.7803ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Professional\.sbt\1.0\plugins, plugins: List(<none>))) took 164.6643ms
[debug] [Loading] Done in C:\Users\Professional\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 220.802ms
[debug]       Load.loadUnit: cleanEvalClasses took 3.0266ms
[debug]     Load.loadUnit(file:/C:/Users/Professional/.sbt/1.0/plugins/, ...) took 724.5908ms
[debug]   Load.apply: load took 1292.8953ms
[debug]   Load.apply: resolveProjects took 12.0904ms
[debug]   Load.apply: finalTransforms took 185.74ms
[debug]   Load.apply: config.delegates took 16.3171ms
[debug]   Load.apply: Def.make(settings)... took 1078.1464ms
[debug]   Load.apply: structureIndex took 209.4998ms
[debug]   Load.apply: mkStreams took 2.5424ms
[info] loading global plugins from C:\Users\Professional\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6962.6874ms
[debug]           Load.loadUnit: plugins took 41.4775ms
[debug]           Load.loadUnit: defsScala took 0.0052ms
[debug] [Loading] Scanning directory C:\Program Files (x86)\SBT\bin\json-parsing\project
[debug]             Load.loadUnit: mkEval took 11.2358ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Program Files (x86)\SBT\bin\json-parsing\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.558 ms
[info] loading settings for project json-parsing-build from idea.sbt ...
[debug]               Load.resolveProject(json-parsing-build) took 11.8378ms
[debug]             Load.loadTransitive: finalizeProject(Project(id json-parsing-build, base: C:\Program Files (x86)\SBT\bin\json-parsing\project, plugins: List(<none>))) took 16.3927ms
[debug] [Loading] Done in C:\Program Files (x86)\SBT\bin\json-parsing\project, returning: (json-parsing-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 261.6919ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.9754ms
[debug]         Load.loadUnit(file:/C:/Program%20Files%20(x86)/SBT/bin/json-parsing/project/, ...) took 313.2959ms
[debug]       Load.apply: load took 315.5288ms
[debug]       Load.apply: resolveProjects took 0.3762ms
[debug]       Load.apply: finalTransforms took 23.6293ms
[debug]       Load.apply: config.delegates took 0.7022ms
[debug]       Load.apply: Def.make(settings)... took 249.7646ms
[debug]       Load.apply: structureIndex took 75.5408ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Program Files (x86)\SBT\bin\json-parsing\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1915.7592ms
[debug]     Load.loadUnit: defsScala took 0.0071ms
[debug] [Loading] Scanning directory C:\Program Files (x86)\SBT\bin\json-parsing
[debug]       Load.loadUnit: mkEval took 0.4897ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.7669 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 56.7568ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Program Files (x86)\SBT\bin\json-parsing, plugins: List(<none>))) took 64.12ms
[debug] [Loading] Done in C:\Program Files (x86)\SBT\bin\json-parsing, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 272.8624ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.1541ms
[debug]   Load.loadUnit(file:/C:/Program%20Files%20(x86)/SBT/bin/json-parsing/, ...) took 2208.8909ms
[debug] Load.apply: load took 2211.6528ms
[debug] Load.apply: resolveProjects took 0.1671ms
[debug] Load.apply: finalTransforms took 59.6804ms
[debug] Load.apply: config.delegates took 0.8943ms
[debug] Load.apply: Def.make(settings)... took 160.9338ms
[debug] Load.apply: structureIndex took 79.2667ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to json parsing (in build file:/C:/Program%20Files%20(x86)/SBT/bin/json-parsing/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57209 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57209, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to json parsing (in build file:/C:/Program%20Files%20(x86)/SBT/bin/json-parsing/)
[debug] > Exec(idea-shell, None, None)
